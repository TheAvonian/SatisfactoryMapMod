// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGRailroadTrackHologram.h"
#include "FGBuildableRoad.h"
#include "FGBuildableRailroadTrack.h"
#include "FGBuildableFoundation.h"

AFGRailroadTrackHologram::AFGRailroadTrackHologram() : Super() {
	this->mMinLength = 1200;
	this->mMaxLength = 10000;
	this->mMinBendRadius = 3000;
	this->mMaxGrade = 25;
	this->mSnapDistance = 500;
	this->mSplineData.SetNum(2); this->mSplineData[0].Location.X = 0; this->mSplineData[0].Location.Y = 0; this->mSplineData[0].Location.Z = 0; this->mSplineData[0].ArriveTangent.X = 1; this->mSplineData[0].ArriveTangent.Y = 0; this->mSplineData[0].ArriveTangent.Z = 0; this->mSplineData[0].LeaveTangent.X = 1; this->mSplineData[0].LeaveTangent.Y = 0; this->mSplineData[0].LeaveTangent.Z = 0; this->mSplineData[1].Location.X = 0; this->mSplineData[1].Location.Y = 0; this->mSplineData[1].Location.Z = 0; this->mSplineData[1].ArriveTangent.X = 1; this->mSplineData[1].ArriveTangent.Y = 0; this->mSplineData[1].ArriveTangent.Z = 0; this->mSplineData[1].LeaveTangent.X = 1; this->mSplineData[1].LeaveTangent.Y = 0; this->mSplineData[1].LeaveTangent.Z = 0;
	this->mMaxPlacementFloorAngle = 35;
	this->mValidHitClasses.Add(AFGBuildableFoundation::StaticClass()); this->mValidHitClasses.Add(AFGBuildableRailroadTrack::StaticClass()); this->mValidHitClasses.Add(AFGBuildableRoad::StaticClass());
	this->mUseBuildClearanceOverlapSnapp = true;
	this->bHidden = true;
	this->bReplicates = true;
}
void AFGRailroadTrackHologram::BeginPlay(){ }
USceneComponent* AFGRailroadTrackHologram::SetupComponent(USceneComponent* attachParent, UActorComponent* componentTemplate, const FName& componentName){ return nullptr; }
void AFGRailroadTrackHologram::SetHologramLocationAndRotation(const FHitResult& hitResult){ }
int32 AFGRailroadTrackHologram::GetBaseCostMultiplier() const{ return int32(); }
bool AFGRailroadTrackHologram::DoMultiStepPlacement(bool isInputFromARelease){ return bool(); }
void AFGRailroadTrackHologram::ConfigureActor( AFGBuildable* inBuildable) const{ }
void AFGRailroadTrackHologram::ConfigureComponents( AFGBuildable* inBuildable) const{ }
void AFGRailroadTrackHologram::SetLocationAndRotationFromPlatformConnections( UFGTrainPlatformConnection* connectionOne,  UFGTrainPlatformConnection* connectionTwo){ }
TArray<class UFGRailroadTrackConnectionComponent*> AFGRailroadTrackHologram::GetSnappedConnectionComponents(){ return TArray<class UFGRailroadTrackConnectionComponent*>(); }
void AFGRailroadTrackHologram::CheckValidPlacement(){ }
void AFGRailroadTrackHologram::CheckValidFloor(){ }
void AFGRailroadTrackHologram::CheckClearance(){ }
void AFGRailroadTrackHologram::UpdateSplineComponent(){ }
bool AFGRailroadTrackHologram::ValidateGrade(){ return bool(); }
bool AFGRailroadTrackHologram::ValidateCurvature(){ return bool(); }
void AFGRailroadTrackHologram::AutoRouteSpline(const FVector& startConnectionPos,
		const FVector& startConnectionNormal,
		const FVector& endConnectionPos,
		const FVector& endConnectionNormal){ }
